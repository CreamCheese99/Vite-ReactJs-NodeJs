-- Table: public.assets

-- DROP TABLE IF EXISTS public.assets;

CREATE TABLE IF NOT EXISTS public.assets
(
    id integer NOT NULL DEFAULT nextval('assets_id_seq'::regclass),
    main_item_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    asset_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    quantity integer,
    unit character varying(50) COLLATE pg_catalog."default",
    fiscal_year character varying(10) COLLATE pg_catalog."default",
    budget_amount numeric(10,2),
    fund_type character varying(50) COLLATE pg_catalog."default",
    standard_price numeric(10,2),
    responsible_person character varying(255) COLLATE pg_catalog."default",
    asset_type character varying(100) COLLATE pg_catalog."default",
    usage_location character varying(255) COLLATE pg_catalog."default",
    delivery_location character varying(10)[] COLLATE pg_catalog."default",
    delivery_date date,
    CONSTRAINT assets_pkey PRIMARY KEY (id),
    CONSTRAINT assets_asset_id_key UNIQUE (asset_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.assets
    OWNER to postgres;




***********************************************************************************************
BEGIN;


CREATE TABLE IF NOT EXISTS public.field
(
    "field_ID" integer NOT NULL,
    field_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT field_pkey PRIMARY KEY ("field_ID")
);

CREATE TABLE IF NOT EXISTS public.image
(
    "image_ID" integer NOT NULL,
    image_path character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT image_pkey PRIMARY KEY ("image_ID")
);

CREATE TABLE IF NOT EXISTS public.main_data
(
    "main_item_ID" integer NOT NULL,
    main_item_name character varying(500)[] COLLATE pg_catalog."default" NOT NULL,
    date_purchase date NOT NULL,
    price numeric(10, 2)[] NOT NULL,
    "Category" character varying(255)[] COLLATE pg_catalog."default" NOT NULL,
    location character varying(500)[] COLLATE pg_catalog."default" NOT NULL,
    "user_ID" integer NOT NULL,
    "field_ID" integer NOT NULL,
    "image_ID" integer NOT NULL,
    amount integer NOT NULL,
    "Details" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT main_data_pkey PRIMARY KEY ("main_item_ID")
);

CREATE TABLE IF NOT EXISTS public.rool
(
    "rool_ID" integer NOT NULL,
    rool_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    "use_ID" integer NOT NULL,
    CONSTRAINT rool_pkey PRIMARY KEY ("rool_ID")
);

CREATE TABLE IF NOT EXISTS public.sub_data
(
    "sub_item_ID" integer NOT NULL,
    sub_item_name character varying(500)[] COLLATE pg_catalog."default" NOT NULL,
    date_purchase date NOT NULL,
    price numeric(10, 2)[] NOT NULL,
    details character varying(255)[] COLLATE pg_catalog."default" NOT NULL,
    location character varying(500)[] COLLATE pg_catalog."default" NOT NULL,
    "image_ID" integer NOT NULL,
    "main_item_ID" integer NOT NULL,
    category character varying(255) COLLATE pg_catalog."default" NOT NULL,
    amount integer NOT NULL,
    CONSTRAINT sub_data_pkey PRIMARY KEY ("sub_item_ID")
);

CREATE TABLE IF NOT EXISTS public."user"
(
    "user_ID" integer NOT NULL,
    user_name character varying(500) COLLATE pg_catalog."default" NOT NULL,
    user_email character varying(150) COLLATE pg_catalog."default" NOT NULL,
    "field_ID" integer NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY ("user_ID")
);

ALTER TABLE IF EXISTS public.image
    ADD FOREIGN KEY ("image_ID")
    REFERENCES public.main_data ("image_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.image
    ADD FOREIGN KEY ("image_ID")
    REFERENCES public.sub_data ("image_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.main_data
    ADD FOREIGN KEY ("user_ID")
    REFERENCES public."user" ("user_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.main_data
    ADD FOREIGN KEY ("field_ID")
    REFERENCES public.field ("field_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.rool
    ADD FOREIGN KEY ("use_ID")
    REFERENCES public."user" ("user_ID") MATCH SIMPLE
... (13 บรรทัด)
